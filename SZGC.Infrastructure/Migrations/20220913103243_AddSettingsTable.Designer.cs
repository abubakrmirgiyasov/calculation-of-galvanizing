// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SZGC.Infrastructure.Data;

namespace SZGC.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220913103243_AddSettingsTable")]
    partial class AddSettingsTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.27")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SZGC.Domain.Models.Nomenclature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxCountTraverse")
                        .HasColumnType("int");

                    b.Property<double>("MaxWeightTraverse")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Nomenclatures");
                });

            modelBuilder.Entity("SZGC.Domain.Models.NomenclatureStage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("NomenclatureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NomenclatureId");

                    b.HasIndex("StageId");

                    b.ToTable("NomenclatureStages");
                });

            modelBuilder.Entity("SZGC.Domain.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CountTraverse")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumOfHitchStation")
                        .HasColumnType("int");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("SZGC.Domain.Models.OrderNomenclature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("AllWeight")
                        .HasColumnType("float");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("CountTraverse")
                        .HasColumnType("int");

                    b.Property<Guid>("NomenclatureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("NomenclatureId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderNomenclatures");
                });

            modelBuilder.Entity("SZGC.Domain.Models.OrderNomenclatureStage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderNomenclatureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderNomenclatureId");

                    b.HasIndex("StageId");

                    b.ToTable("OrderNomenclatureStages");
                });

            modelBuilder.Entity("SZGC.Domain.Models.RefreshSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClientName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Ip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeExpired")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshSessions");
                });

            modelBuilder.Entity("SZGC.Domain.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c9554729-2fd8-4cdd-9993-f49274ec800c"),
                            DateCreate = new DateTime(2022, 9, 13, 17, 32, 42, 405, DateTimeKind.Local).AddTicks(3084),
                            Name = "Root"
                        },
                        new
                        {
                            Id = new Guid("5f718117-20d9-4080-a7ad-d88f315f9f0b"),
                            DateCreate = new DateTime(2022, 9, 13, 17, 32, 42, 405, DateTimeKind.Local).AddTicks(3084),
                            Name = "User"
                        });
                });

            modelBuilder.Entity("SZGC.Domain.Models.Setting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Settings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("615358b4-0672-4dc9-94d2-cb45db769ffd"),
                            Name = "WorkingShift",
                            Value = "11"
                        });
                });

            modelBuilder.Entity("SZGC.Domain.Models.Stage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsSumming")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SortedBy")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Stages");
                });

            modelBuilder.Entity("SZGC.Domain.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("CountFailEnter")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Salt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("SurName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("UpdatePassword")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2075715e-86b6-4b74-852d-9a40b450f32a"),
                            Active = true,
                            CountFailEnter = 0,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Login = "Root",
                            MiddleName = "Root",
                            Name = "Root",
                            Password = "NDJ5azugs+sM+kmoS0qU5d/PYRnJwHjn0lwiA/S+/Po=",
                            Salt = new byte[] { 148, 84, 30, 28, 80, 208, 112, 142, 17, 187, 37, 115, 206, 112, 105, 224 },
                            SurName = "Root",
                            UpdatePassword = false
                        },
                        new
                        {
                            Id = new Guid("6c30ca41-67d3-4e92-b4ee-8a9e901e6a9a"),
                            Active = true,
                            CountFailEnter = 0,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Login = "duser",
                            MiddleName = "",
                            Name = "User",
                            Password = "azRxwNBq6nDLDX2XI3vHGCZ0saPZMI80+iNaywKIQh4=",
                            Salt = new byte[] { 148, 84, 30, 28, 80, 208, 112, 142, 17, 187, 37, 115, 206, 112, 105, 224 },
                            SurName = "Default",
                            UpdatePassword = false
                        });
                });

            modelBuilder.Entity("SZGC.Domain.Models.UserChange", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Salt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("SurName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("UpdatePassword")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("TypeId");

                    b.HasIndex("UserId");

                    b.ToTable("UserChanges");
                });

            modelBuilder.Entity("SZGC.Domain.Models.UserChangeType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserChangeType");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d9fc7e44-7c6a-4713-bfb6-e258daf43c23"),
                            DateCreate = new DateTime(2022, 9, 13, 17, 32, 42, 406, DateTimeKind.Local).AddTicks(3065),
                            Name = "Добавление пользователя"
                        },
                        new
                        {
                            Id = new Guid("10705ceb-d3e8-4f73-a8cb-817c6a1d04f2"),
                            DateCreate = new DateTime(2022, 9, 13, 17, 32, 42, 406, DateTimeKind.Local).AddTicks(3065),
                            Name = "Изменение пользователя"
                        },
                        new
                        {
                            Id = new Guid("8f562b11-ce40-476d-a063-80271d2956c3"),
                            DateCreate = new DateTime(2022, 9, 13, 17, 32, 42, 406, DateTimeKind.Local).AddTicks(3065),
                            Name = "Удаление пользователя"
                        });
                });

            modelBuilder.Entity("SZGC.Domain.Models.UserRole", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("c9554729-2fd8-4cdd-9993-f49274ec800c"),
                            UserId = new Guid("2075715e-86b6-4b74-852d-9a40b450f32a")
                        },
                        new
                        {
                            RoleId = new Guid("5f718117-20d9-4080-a7ad-d88f315f9f0b"),
                            UserId = new Guid("6c30ca41-67d3-4e92-b4ee-8a9e901e6a9a")
                        });
                });

            modelBuilder.Entity("SZGC.Domain.Models.Nomenclature", b =>
                {
                    b.HasOne("SZGC.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SZGC.Domain.Models.NomenclatureStage", b =>
                {
                    b.HasOne("SZGC.Domain.Models.Nomenclature", "Nomenclature")
                        .WithMany("NomenclatureStages")
                        .HasForeignKey("NomenclatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SZGC.Domain.Models.Stage", "Stage")
                        .WithMany("NomenclatureStages")
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("SZGC.Domain.Models.Order", b =>
                {
                    b.HasOne("SZGC.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SZGC.Domain.Models.OrderNomenclature", b =>
                {
                    b.HasOne("SZGC.Domain.Models.Nomenclature", "Nomenclature")
                        .WithMany("OrderNomenclatures")
                        .HasForeignKey("NomenclatureId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SZGC.Domain.Models.Order", "Order")
                        .WithMany("OrderNomenclatures")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SZGC.Domain.Models.OrderNomenclatureStage", b =>
                {
                    b.HasOne("SZGC.Domain.Models.OrderNomenclature", "OrderNomenclature")
                        .WithMany("OrderNomenclatureStages")
                        .HasForeignKey("OrderNomenclatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SZGC.Domain.Models.Stage", "Stage")
                        .WithMany("OrderNomenclatureStages")
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("SZGC.Domain.Models.RefreshSession", b =>
                {
                    b.HasOne("SZGC.Domain.Models.User", "User")
                        .WithMany("RefreshSessions")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("SZGC.Domain.Models.Stage", b =>
                {
                    b.HasOne("SZGC.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SZGC.Domain.Models.UserChange", b =>
                {
                    b.HasOne("SZGC.Domain.Models.User", "Owner")
                        .WithMany("OwnerChanges")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SZGC.Domain.Models.UserChangeType", "Type")
                        .WithMany("UserChanges")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SZGC.Domain.Models.User", "User")
                        .WithMany("UserChanges")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("SZGC.Domain.Models.UserRole", b =>
                {
                    b.HasOne("SZGC.Domain.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SZGC.Domain.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
